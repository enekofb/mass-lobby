AWSTemplateFormatVersion: "2010-09-09"
Description: MassLobby Cloudformation Template
Parameters:
  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "mass-lobby-function"

Resources:
  MassLobbyMasterKey:
    Type: AWS::KMS::Key
    Properties:
      Description: mass lobby master key
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: MassLobbyMasterKeyPolicy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':user/enekofb'
            Action: 'kms:*'
            Resource: '*'
      KeyUsage: ENCRYPT_DECRYPT
  MassLobbyMasterKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/mass-lobby
      TargetKeyId:
        Ref: MassLobbyMasterKey
  MassLobbyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "777171359344-mass-lobby-bucket"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !GetAtt "MassLobbyMasterKey.Arn"
      AccessControl: Private
  MassLobbyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "Policy"
      BillingMode: "PROVISIONED"
      Tags:
        - Key: "Application"
          Value: "mass lobby"
      AttributeDefinitions:
        - AttributeName: "PolicyId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PolicyId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  
  MassLobbyApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "my-api"
      Description: "My API"
  PolicyResource:    
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MassLobbyApi
      ParentId: !GetAtt 
        - MassLobbyApi
        - RootResourceId
      PathPart: policy
  PolicyIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MassLobbyApi
      ParentId: !Ref "PolicyResource"
      PathPart: "{id}"
  GetPolicyByIdMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"
      ResourceId: !Ref "PolicyIdResource"
      RestApiId: !Ref "MassLobbyApi"
  MassLobbyApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "GetPolicyByIdMethod"    
    Properties:
      RestApiId: !Ref "MassLobbyApi"
      StageName: "acceptance"

  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event,context):
            return {
              'body': 'Hello there {0}'.format(event['requestContext']['identity']['sourceIp']),
              'headers': {
                'Content-Type': 'text/plain'
              },
              'statusCode': 200
            }
      Description: "My function"
      FunctionName: !Ref "lambdaFunctionName"
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python2.7"
      Timeout: 10

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MassLobbyApi}/*/GET/policy/*"

  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
          PolicyName: "lambda"

  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 90

Outputs:
  MassLobbyApiInvokeURL:
    Value: !Sub "https://${MassLobbyApi}.execute-api.${AWS::Region}.amazonaws.com/acceptance"
  MassLobbyMasterKeyArn:
    Value: !GetAtt "MassLobbyMasterKey.Arn"
  lambdaArn:
    Value: !GetAtt "lambdaFunction.Arn"